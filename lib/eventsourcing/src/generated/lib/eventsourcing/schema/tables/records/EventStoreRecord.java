/*
 * This file is generated by jOOQ.
 */
package lib.eventsourcing.schema.tables.records;


import java.time.OffsetDateTime;

import lib.eventsourcing.schema.tables.EventStore;

import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EventStoreRecord extends UpdatableRecordImpl<EventStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>event_store_schema.event_store.id</code>.
     */
    public EventStoreRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>event_store_schema.event_store.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>event_store_schema.event_store.transaction_id</code>.
     */
    public EventStoreRecord setTransactionId(Object value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>event_store_schema.event_store.transaction_id</code>.
     */
    public Object getTransactionId() {
        return get(1);
    }

    /**
     * Setter for <code>event_store_schema.event_store.aggregate_id</code>.
     */
    public EventStoreRecord setAggregateId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>event_store_schema.event_store.aggregate_id</code>.
     */
    public String getAggregateId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>event_store_schema.event_store.aggregate_type</code>.
     */
    public EventStoreRecord setAggregateType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>event_store_schema.event_store.aggregate_type</code>.
     */
    public String getAggregateType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>event_store_schema.event_store.event_type</code>.
     */
    public EventStoreRecord setEventType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>event_store_schema.event_store.event_type</code>.
     */
    public String getEventType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>event_store_schema.event_store.timestamp</code>.
     */
    public EventStoreRecord setTimestamp(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>event_store_schema.event_store.timestamp</code>.
     */
    public OffsetDateTime getTimestamp() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>event_store_schema.event_store.payload</code>.
     */
    public EventStoreRecord setPayload(JSONB value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>event_store_schema.event_store.payload</code>.
     */
    public JSONB getPayload() {
        return (JSONB) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventStoreRecord
     */
    public EventStoreRecord() {
        super(EventStore.EVENT_STORE);
    }

    /**
     * Create a detached, initialised EventStoreRecord
     */
    public EventStoreRecord(Long id, Object transactionId, String aggregateId, String aggregateType, String eventType, OffsetDateTime timestamp, JSONB payload) {
        super(EventStore.EVENT_STORE);

        setId(id);
        setTransactionId(transactionId);
        setAggregateId(aggregateId);
        setAggregateType(aggregateType);
        setEventType(eventType);
        setTimestamp(timestamp);
        setPayload(payload);
        resetChangedOnNotNull();
    }
}
