/*
 * This file is generated by jOOQ.
 */
package lib.eventsourcing.schema.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import lib.eventsourcing.schema.EventStoreSchema;
import lib.eventsourcing.schema.Indexes;
import lib.eventsourcing.schema.Keys;
import lib.eventsourcing.schema.tables.records.EventStoreRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EventStore extends TableImpl<EventStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>event_store_schema.event_store</code>
     */
    public static final EventStore EVENT_STORE = new EventStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventStoreRecord> getRecordType() {
        return EventStoreRecord.class;
    }

    /**
     * The column <code>event_store_schema.event_store.id</code>.
     */
    public final TableField<EventStoreRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>event_store_schema.event_store.transaction_id</code>.
     */
    public final TableField<EventStoreRecord, Object> TRANSACTION_ID = createField(DSL.name("transaction_id"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"xid8\"").nullable(false).defaultValue(DSL.field(DSL.raw("'0'::xid8"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>event_store_schema.event_store.aggregate_id</code>.
     */
    public final TableField<EventStoreRecord, String> AGGREGATE_ID = createField(DSL.name("aggregate_id"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>event_store_schema.event_store.aggregate_type</code>.
     */
    public final TableField<EventStoreRecord, String> AGGREGATE_TYPE = createField(DSL.name("aggregate_type"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>event_store_schema.event_store.event_type</code>.
     */
    public final TableField<EventStoreRecord, String> EVENT_TYPE = createField(DSL.name("event_type"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>event_store_schema.event_store.timestamp</code>.
     */
    public final TableField<EventStoreRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(3).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>event_store_schema.event_store.payload</code>.
     */
    public final TableField<EventStoreRecord, JSONB> PAYLOAD = createField(DSL.name("payload"), SQLDataType.JSONB, this, "");

    private EventStore(Name alias, Table<EventStoreRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EventStore(Name alias, Table<EventStoreRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>event_store_schema.event_store</code> table
     * reference
     */
    public EventStore(String alias) {
        this(DSL.name(alias), EVENT_STORE);
    }

    /**
     * Create an aliased <code>event_store_schema.event_store</code> table
     * reference
     */
    public EventStore(Name alias) {
        this(alias, EVENT_STORE);
    }

    /**
     * Create a <code>event_store_schema.event_store</code> table reference
     */
    public EventStore() {
        this(DSL.name("event_store"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EventStoreSchema.EVENT_STORE_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EVENT_STORE_AGGREGATE_INDEX, Indexes.EVENT_STORE_TIMESTAMP_INDEX, Indexes.EVENT_STORE_TRANSACTION_ID_IDX);
    }

    @Override
    public Identity<EventStoreRecord, Long> getIdentity() {
        return (Identity<EventStoreRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventStoreRecord> getPrimaryKey() {
        return Keys.EVENT_STORE_PKEY;
    }

    @Override
    public EventStore as(String alias) {
        return new EventStore(DSL.name(alias), this);
    }

    @Override
    public EventStore as(Name alias) {
        return new EventStore(alias, this);
    }

    @Override
    public EventStore as(Table<?> alias) {
        return new EventStore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventStore rename(String name) {
        return new EventStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventStore rename(Name name) {
        return new EventStore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventStore rename(Table<?> name) {
        return new EventStore(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventStore where(Condition condition) {
        return new EventStore(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventStore where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventStore where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventStore where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventStore where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventStore where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventStore where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventStore where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventStore whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventStore whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
