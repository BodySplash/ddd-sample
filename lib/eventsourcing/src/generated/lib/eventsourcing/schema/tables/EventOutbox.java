/*
 * This file is generated by jOOQ.
 */
package lib.eventsourcing.schema.tables;


import java.util.Collection;

import lib.eventsourcing.schema.EventStoreSchema;
import lib.eventsourcing.schema.Keys;
import lib.eventsourcing.schema.tables.records.EventOutboxRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EventOutbox extends TableImpl<EventOutboxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>event_store_schema.event_outbox</code>
     */
    public static final EventOutbox EVENT_OUTBOX = new EventOutbox();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventOutboxRecord> getRecordType() {
        return EventOutboxRecord.class;
    }

    /**
     * The column
     * <code>event_store_schema.event_outbox.subscription_group</code>.
     */
    public final TableField<EventOutboxRecord, String> SUBSCRIPTION_GROUP = createField(DSL.name("subscription_group"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>event_store_schema.event_outbox.last_id</code>.
     */
    public final TableField<EventOutboxRecord, Long> LAST_ID = createField(DSL.name("last_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>event_store_schema.event_outbox.last_transaction_id</code>.
     */
    public final TableField<EventOutboxRecord, Object> LAST_TRANSACTION_ID = createField(DSL.name("last_transaction_id"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"xid8\"").nullable(false).defaultValue(DSL.field(DSL.raw("'0'::xid8"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>event_store_schema.event_outbox.max_id</code>.
     */
    public final TableField<EventOutboxRecord, Long> MAX_ID = createField(DSL.name("max_id"), SQLDataType.BIGINT, this, "");

    private EventOutbox(Name alias, Table<EventOutboxRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EventOutbox(Name alias, Table<EventOutboxRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>event_store_schema.event_outbox</code> table
     * reference
     */
    public EventOutbox(String alias) {
        this(DSL.name(alias), EVENT_OUTBOX);
    }

    /**
     * Create an aliased <code>event_store_schema.event_outbox</code> table
     * reference
     */
    public EventOutbox(Name alias) {
        this(alias, EVENT_OUTBOX);
    }

    /**
     * Create a <code>event_store_schema.event_outbox</code> table reference
     */
    public EventOutbox() {
        this(DSL.name("event_outbox"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EventStoreSchema.EVENT_STORE_SCHEMA;
    }

    @Override
    public UniqueKey<EventOutboxRecord> getPrimaryKey() {
        return Keys.EVENT_OUTBOX_PKEY;
    }

    @Override
    public EventOutbox as(String alias) {
        return new EventOutbox(DSL.name(alias), this);
    }

    @Override
    public EventOutbox as(Name alias) {
        return new EventOutbox(alias, this);
    }

    @Override
    public EventOutbox as(Table<?> alias) {
        return new EventOutbox(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventOutbox rename(String name) {
        return new EventOutbox(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventOutbox rename(Name name) {
        return new EventOutbox(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventOutbox rename(Table<?> name) {
        return new EventOutbox(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventOutbox where(Condition condition) {
        return new EventOutbox(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventOutbox where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventOutbox where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventOutbox where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventOutbox where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventOutbox where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventOutbox where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventOutbox where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventOutbox whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventOutbox whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
