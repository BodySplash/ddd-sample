/*
 * This file is generated by jOOQ.
 */
package lib.eventsourcing.schema.tables;


import java.util.Collection;

import lib.eventsourcing.schema.EventStoreSchema;
import lib.eventsourcing.schema.Keys;
import lib.eventsourcing.schema.tables.records.AggregateMetadataRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AggregateMetadata extends TableImpl<AggregateMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>event_store_schema.aggregate_metadata</code>
     */
    public static final AggregateMetadata AGGREGATE_METADATA = new AggregateMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AggregateMetadataRecord> getRecordType() {
        return AggregateMetadataRecord.class;
    }

    /**
     * The column <code>event_store_schema.aggregate_metadata.id</code>.
     */
    public final TableField<AggregateMetadataRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>event_store_schema.aggregate_metadata.type</code>.
     */
    public final TableField<AggregateMetadataRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>event_store_schema.aggregate_metadata.version</code>.
     */
    public final TableField<AggregateMetadataRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>event_store_schema.aggregate_metadata.snapshot_offset</code>.
     */
    public final TableField<AggregateMetadataRecord, Long> SNAPSHOT_OFFSET = createField(DSL.name("snapshot_offset"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>event_store_schema.aggregate_metadata.snapshot</code>.
     */
    public final TableField<AggregateMetadataRecord, JSONB> SNAPSHOT = createField(DSL.name("snapshot"), SQLDataType.JSONB, this, "");

    private AggregateMetadata(Name alias, Table<AggregateMetadataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AggregateMetadata(Name alias, Table<AggregateMetadataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>event_store_schema.aggregate_metadata</code>
     * table reference
     */
    public AggregateMetadata(String alias) {
        this(DSL.name(alias), AGGREGATE_METADATA);
    }

    /**
     * Create an aliased <code>event_store_schema.aggregate_metadata</code>
     * table reference
     */
    public AggregateMetadata(Name alias) {
        this(alias, AGGREGATE_METADATA);
    }

    /**
     * Create a <code>event_store_schema.aggregate_metadata</code> table
     * reference
     */
    public AggregateMetadata() {
        this(DSL.name("aggregate_metadata"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EventStoreSchema.EVENT_STORE_SCHEMA;
    }

    @Override
    public UniqueKey<AggregateMetadataRecord> getPrimaryKey() {
        return Keys.AGGREGATE_METADATA_PK;
    }

    @Override
    public AggregateMetadata as(String alias) {
        return new AggregateMetadata(DSL.name(alias), this);
    }

    @Override
    public AggregateMetadata as(Name alias) {
        return new AggregateMetadata(alias, this);
    }

    @Override
    public AggregateMetadata as(Table<?> alias) {
        return new AggregateMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregateMetadata rename(String name) {
        return new AggregateMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregateMetadata rename(Name name) {
        return new AggregateMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregateMetadata rename(Table<?> name) {
        return new AggregateMetadata(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AggregateMetadata where(Condition condition) {
        return new AggregateMetadata(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AggregateMetadata where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AggregateMetadata where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AggregateMetadata where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AggregateMetadata where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AggregateMetadata where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AggregateMetadata where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AggregateMetadata where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AggregateMetadata whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AggregateMetadata whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
